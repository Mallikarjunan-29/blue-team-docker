name: Log GitHub Traffic Data (Clones & Views)

on:
  schedule:
    - cron: '0 0 * * *'  # daily at midnight UTC
  workflow_dispatch:

permissions:
  contents: read

jobs:
  log-traffic:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main repo (for context)
        uses: actions/checkout@v3

      - name: Set DATE environment variable
        run: echo "DATE=$(date +%F)" >> $GITHUB_ENV

      - name: Clone the log repo
        run: |
          git clone https://x-access-token:${{ secrets.PAT_GITHUB_TRAFFIC }}@github.com/Mallikarjunan-29/git-clone-logs.git
      - name: Verify logs_repo clone
        run: |
          ls -la
          ls -la logs_repo
          cat logs_repo/.git/config

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch and merge traffic data
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB_TRAFFIC }}
          REPO: Mallikarjunan-29/blue-team-docker
          DATE: ${{ env.DATE }}
        run: |
          python <<EOF
          import os, json, requests

          date = os.environ['DATE']
          repo = os.environ['REPO']
          token = os.environ['GH_TOKEN']
          logs_path = 'logs_repo/logs.json'

          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github+json'
          }

          clones_resp = requests.get(f'https://api.github.com/repos/{repo}/traffic/clones', headers=headers)
          clones_resp.raise_for_status()
          clones_data = clones_resp.json()

          views_resp = requests.get(f'https://api.github.com/repos/{repo}/traffic/views', headers=headers)
          views_resp.raise_for_status()
          views_data = views_resp.json()

          if not os.path.exists('logs_repo'):
              os.makedirs('logs_repo')

          if os.path.isfile(logs_path):
              with open(logs_path, 'r') as f:
                  logs = json.load(f)
          else:
              logs = {}

          logs[date] = {
              "repo": f"https://github.com/{repo}",
              "clones": {
                  "count": clones_data.get('count', 0),
                  "uniques": clones_data.get('uniques', 0)
              },
              "views": {
                  "count": views_data.get('count', 0),
                  "uniques": views_data.get('uniques', 0)
              }
          }

          with open(logs_path, 'w') as f:
              json.dump(logs, f, indent=2)
          EOF

      - name: Commit and push updated logs
        run: |
          cd logs_repo
          pwd ls -l
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add logs.json
          git commit -m "Update GitHub traffic logs for $DATE" || echo "No changes to commit"
          git push
